"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@keystonehq+sol-keyring@0.3.1_bufferutil@4.0.8_utf-8-validate@5.0.10";
exports.ids = ["vendor-chunks/@keystonehq+sol-keyring@0.3.1_bufferutil@4.0.8_utf-8-validate@5.0.10"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@keystonehq+sol-keyring@0.3.1_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/@keystonehq/sol-keyring/dist/index.js":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@keystonehq+sol-keyring@0.3.1_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/@keystonehq/sol-keyring/dist/index.js ***!
  \****************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./sol-keyring.cjs.development.js */ \"(ssr)/./node_modules/.pnpm/@keystonehq+sol-keyring@0.3.1_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/@keystonehq/sol-keyring/dist/sol-keyring.cjs.development.js\")\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGtleXN0b25laHErc29sLWtleXJpbmdAMC4zLjFfYnVmZmVydXRpbEA0LjAuOF91dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BrZXlzdG9uZWhxL3NvbC1rZXlyaW5nL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUNZOztBQUVaLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSx3UEFBNEQ7QUFDOUQiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL2l3by1wbGF0Zm9ybS9ub2RlX21vZHVsZXMvLnBucG0vQGtleXN0b25laHErc29sLWtleXJpbmdAMC4zLjFfYnVmZmVydXRpbEA0LjAuOF91dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BrZXlzdG9uZWhxL3NvbC1rZXlyaW5nL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIHN0cmljdCdcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NvbC1rZXlyaW5nLmNqcy5wcm9kdWN0aW9uLm1pbi5qcycpXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc29sLWtleXJpbmcuY2pzLmRldmVsb3BtZW50LmpzJylcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@keystonehq+sol-keyring@0.3.1_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/@keystonehq/sol-keyring/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@keystonehq+sol-keyring@0.3.1_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/@keystonehq/sol-keyring/dist/sol-keyring.cjs.development.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@keystonehq+sol-keyring@0.3.1_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/@keystonehq/sol-keyring/dist/sol-keyring.cjs.development.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar bcUrRegistrySol = __webpack_require__(/*! @keystonehq/bc-ur-registry-sol */ \"(ssr)/./node_modules/.pnpm/@keystonehq+bc-ur-registry-sol@0.3.1/node_modules/@keystonehq/bc-ur-registry-sol/dist/index.js\");\nvar sdk = __webpack_require__(/*! @keystonehq/sdk */ \"(ssr)/./node_modules/.pnpm/@keystonehq+sdk@0.13.1/node_modules/@keystonehq/sdk/dist/index.js\");\nvar sdk__default = _interopDefault(sdk);\nvar bcUrRegistry = __webpack_require__(/*! @keystonehq/bc-ur-registry */ \"(ssr)/./node_modules/.pnpm/@keystonehq+bc-ur-registry@0.5.5/node_modules/@keystonehq/bc-ur-registry/dist/index.js\");\nvar bs58 = _interopDefault(__webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/.pnpm/bs58@5.0.0/node_modules/bs58/index.js\"));\nvar uuid = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/index.js\");\nvar web3_js = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/.pnpm/@solana+web3.js@1.98.0_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/@solana/web3.js/lib/index.esm.js\");\n\nclass DefaultInteractionProvider {\n  constructor() {\n    this.keystoneSDK = undefined;\n\n    this.readCryptoMultiAccounts = async () => {\n      const decodedResult = await this.keystoneSDK.read([sdk.SupportedResult.UR_CRYPTO_MULTI_ACCOUNTS], {\n        title: \"Sync Keystone\",\n        description: \"Please scan the QR code displayed on your Keystone\",\n        renderInitial: {\n          walletMode: \"Solflare\",\n          link: \"https://keyst.one/defi\"\n        },\n        URTypeErrorMessage: \"The scanned QR code is not the sync code from the Keystone hardware wallet. Please verify the code and try again\"\n      });\n\n      if (decodedResult.status === sdk.ReadStatus.success) {\n        const {\n          result\n        } = decodedResult;\n        return bcUrRegistry.CryptoMultiAccounts.fromCBOR(result.cbor);\n      } else {\n        throw new Error(\"Reading canceled\");\n      }\n    };\n\n    this.requestSignature = async (solSignRequest, requestTitle, requestDescription) => {\n      const status = await this.keystoneSDK.play(solSignRequest.toUR(), {\n        hasNext: true,\n        title: requestTitle,\n        description: requestDescription,\n        maxFragmentLength: 400\n      });\n      if (status === sdk.PlayStatus.canceled) throw new Error(\"#ktek_error[play-cancel]: play canceled\");\n      const result = await this.keystoneSDK.read([sdk.SupportedResult.UR_SOL_SIGNATURE], {\n        title: \"Scan Keystone\",\n        description: \"Please scan the QR code displayed on your Keystone\"\n      });\n\n      if (result.status === sdk.ReadStatus.canceled) {\n        throw new Error(\"#ktek_error[read-cancel]: read signature canceled\");\n      } else {\n        return bcUrRegistrySol.SolSignature.fromCBOR(result.result.cbor);\n      }\n    };\n\n    if (DefaultInteractionProvider.instance) {\n      return DefaultInteractionProvider.instance;\n    }\n\n    sdk__default.bootstrap();\n    this.keystoneSDK = sdk__default.getSdk();\n    DefaultInteractionProvider.instance = this;\n  }\n\n}\n\nconst keyringType = \"QR Hardware Wallet Device\";\nclass BaseKeyring {\n  constructor() {\n    this.getInteraction = () => {\n      throw new Error(\"KeystoneError#invalid_extends: method getInteraction not implemented, please extend BaseKeyring by overwriting this method.\");\n    };\n\n    this.type = keyringType;\n\n    this.requestSignature = async (_requestId, signRequest, requestTitle, requestDescription) => {\n      const solSignature = await this.getInteraction().requestSignature(signRequest, requestTitle, requestDescription);\n      const requestIdBuffer = solSignature.getRequestId();\n      const signature = solSignature.getSignature();\n\n      if (requestIdBuffer) {\n        const requestId = uuid.stringify(requestIdBuffer);\n\n        if (requestId !== _requestId) {\n          throw new Error(\"KeystoneError#invalid_data: read signature error: mismatched requestId\");\n        }\n      }\n\n      return signature;\n    };\n\n    this.getName = () => {\n      return this.name;\n    }; //common props\n\n\n    this.keys = [];\n    this.name = \"QR Hardware\";\n    this.initialized = false;\n    this.device = \"\";\n    this.xfp = \"\";\n  } //initial read\n\n\n  async readKeyring() {\n    const result = await this.getInteraction().readCryptoMultiAccounts();\n    this.syncKeyring(result);\n  }\n\n  syncKeyring(data) {\n    var _data$getKeys$0$getOr;\n\n    const keys = data.getKeys();\n    this.device = data.getDevice();\n    this.xfp = (_data$getKeys$0$getOr = data.getKeys()[0].getOrigin().getSourceFingerprint()) == null ? void 0 : _data$getKeys$0$getOr.toString(\"hex\");\n    this.name = data.getKeys()[0].getName();\n    this.keys = keys.map((each, index) => ({\n      hdPath: each.getOrigin().getPath(),\n      pubKey: bs58.encode(each.getKey()),\n      index\n    }));\n    this.initialized = true;\n  }\n\n  syncKeyringData({\n    xfp,\n    keys,\n    name = \"QR Hardware\",\n    device\n  }) {\n    this.xfp = xfp;\n    this.name = name;\n    this.keys = keys;\n    this.device = device;\n    this.initialized = true;\n  }\n\n  getAccounts() {\n    if (!this.initialized) {\n      return [];\n    }\n\n    return this.keys;\n  }\n\n  async signTransaction(pubKey, tx) {\n    const signature = await this._getSignature(pubKey, Buffer.from(tx.serializeMessage()), bcUrRegistrySol.SignType.Transaction);\n    tx.addSignature(new web3_js.PublicKey(pubKey), signature);\n    return tx;\n  }\n\n  async signMessage(pubKey, messageHex) {\n    return await this._getSignature(pubKey, Buffer.from(messageHex), bcUrRegistrySol.SignType.Message);\n  }\n\n  async createSignature(pubKey, messageHex) {\n    try {\n      const messageInstance = web3_js.Message.from(messageHex);\n      const transaction = web3_js.Transaction.populate(messageInstance, []);\n\n      if (transaction) {\n        return this._getSignature(pubKey, Buffer.from(messageHex), bcUrRegistrySol.SignType.Transaction);\n      }\n    } catch (e) {}\n\n    return this.signMessage(pubKey, messageHex);\n  }\n\n  async _getSignature(pubKey, messageHex, signType) {\n    const requestId = uuid.v4();\n    const account = this.getAccounts().find(account => account.pubKey == pubKey);\n    const solSignRequest = bcUrRegistrySol.SolSignRequest.constructSOLRequest(messageHex, account.hdPath, this.xfp, signType, requestId);\n    return this.requestSignature(requestId, solSignRequest, \"Scan with your Keystone\", 'After your Keystone has signed this message, click on \"Scan Keystone\" to receive the signature');\n  }\n\n}\nBaseKeyring.type = keyringType;\n\nclass DefaultKeyring extends BaseKeyring {\n  constructor() {\n    super();\n\n    this.getInteraction = () => {\n      return new DefaultInteractionProvider();\n    };\n  }\n\n  static getEmptyKeyring() {\n    return new DefaultKeyring();\n  }\n\n}\nDefaultKeyring.type = BaseKeyring.type;\n\nexports.BaseKeyring = BaseKeyring;\nexports.DefaultKeyring = DefaultKeyring;\n//# sourceMappingURL=sol-keyring.cjs.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@keystonehq+sol-keyring@0.3.1_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/@keystonehq/sol-keyring/dist/sol-keyring.cjs.development.js\n");

/***/ })

};
;